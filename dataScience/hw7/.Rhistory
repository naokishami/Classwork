arrange(mdy(Date)) %>%
ungroup()
# Summing up all the provinces/state into country
covid.tidy <- covid.tidy %>%
group_by(country, date) %>%
summarise(confirmed = sum(confirmed)) %>%
arrange(mdy(date)) %>%
ungroup()
# Summing up all the provinces/state into country
covidDeath.tidy <- covidDeath.tidy %>%
group_by(country, date) %>%
summarise(deaths = sum(deaths)) %>%
arrange(mdy(Date)) %>%
ungroup()
# Summing up all the provinces/state into country
covidDeath.tidy <- covidDeath.tidy %>%
group_by(country, date) %>%
summarise(deaths = sum(deaths)) %>%
arrange(mdy(date)) %>%
ungroup()
covid.table <- covid.tidy %>%
full_join(covidDeath.tidy) %>%
full_join(bed.tidy) %>%
full_join(demo.tidy)
covid.table <- covid.table %>%
select(-Year, -CountryCode)
covid.table
library(tidyverse)
library(lubridate) # used to order by date
# Read the datasets
covid <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
covidDeath <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
bed <- read_csv("/Users/naoki_atkins/Desktop/data.csv")
demo <- read_csv("/Users/naoki_atkins/Desktop/demographics.csv")
# Tidying the data
covid.tidy <- covid %>%
pivot_longer(cols = 5:ncol(covid), names_to = "Date", values_to = "confirmed")
# Tidying the data
covidDeath.tidy <- covidDeath %>%
pivot_longer(cols = 5:ncol(covidDeath), names_to = "Date", values_to = "deaths")
# Tidying the data
demo.tidy <- demo %>%
group_by(`Country Code`) %>%
select(-`Series Name`) %>%
pivot_wider(names_from = `Series Code`, values_from = `YR2015`) %>%
ungroup()
# Extract the most recent year for every country - all other years are not necessary to keep
bed.tidy <- bed %>%
group_by(Country) %>%
filter(Year == max(Year)) %>%
ungroup()
# Add male and female populations together - not examining sex-related differences
demo.tidy <- demo.tidy %>%
mutate(SP.POP.80UP.TOTL = SP.POP.80UP.FE + SP.POP.80UP.MA) %>%
mutate(SP.POP.1564.TOTL = SP.POP.1564.FE.IN + SP.POP.1564.MA.IN) %>%
mutate(SP.POP.0014.TOTL = SP.POP.0014.FE.IN + SP.POP.0014.MA.IN) %>%
mutate(SP.DYN.AMRT.TOTL = SP.DYN.AMRT.FE + SP.DYN.AMRT.MA) %>%
mutate(SP.POP.65UP.TOTL = SP.POP.65UP.FE.IN + SP.POP.65UP.MA.IN)
# Rename header
bed.tidy <- bed.tidy %>%
rename(HospitalBeds = `Hospital beds (per 10 000 population)`)
# Rename header
covid.tidy <- covid.tidy %>%
rename(ProvinceState = `Province/State`) %>%
rename(Country = `Country/Region`)
# Rename header
covidDeath.tidy <- covidDeath.tidy %>%
rename(ProvinceState = `Province/State`) %>%
rename(Country = `Country/Region`)
# Rename header
demo.tidy <- demo.tidy %>%
rename(Country = `Country Name`) %>%
rename(CountryCode = `Country Code`)
# Rename countries in a standard format so we can join tables later
bed.tidy <- bed.tidy %>%
mutate(Country = replace(Country, Country == "Republic of Korea", "South Korea")) %>%
mutate(Country = replace(Country, Country == "Democratic People's Republic of Korea", "North Korea")) %>%
mutate(Country = replace(Country, Country == "Iran (Islamic Republic of)", "Iran")) %>%
mutate(Country = replace(Country, Country == "United Kingdom of Great Britain and Northern Ireland", "United Kingdom"))
# Renaming countries
covid.tidy <- covid.tidy %>%
mutate(Country = replace(Country, Country == "Korea, South", "South Korea"))
# Renaming countries
covidDeath.tidy <- covidDeath.tidy %>%
mutate(Country = replace(Country, Country == "Korea, South", "South Korea"))
# Renaming countries
demo.tidy <- demo.tidy %>%
mutate(Country = replace(Country, Country == "Korea, Rep.", "South Korea")) %>%
mutate(Country = replace(Country, Country == "Korea, Dem. People’s Rep.", "North Korea")) %>%
mutate(Country = replace(Country, Country == "Iran, Islamic Rep.", "Iran"))
# Summing up all the provinces/state into country
covid.tidy <- covid.tidy %>%
group_by(Country, Date) %>%
summarise(confirmed = sum(confirmed)) %>%
arrange(mdy(Date)) %>%
ungroup()
# Summing up all the provinces/state into country
covidDeath.tidy <- covidDeath.tidy %>%
group_by(Country, Date) %>%
summarise(deaths = sum(deaths)) %>%
arrange(mdy(Date)) %>%
ungroup()
covid.table <- covid.tidy %>%
full_join(covidDeath.tidy) %>%
full_join(bed.tidy) %>%
full_join(demo.tidy)
covid.table <- covid.table %>%
select(-Year, -CountryCode)
covid.table
str(covid.table)
covid.tables %>% colnames()
covid.table %>% colnames()
headers <- covid.table %>% colnames()
headers
headers.as.data.frame
as.data.frame(headers)
headers
str(headers)
type(headers)
class(headers)
covid.table %>%
select(-headers)
covid.table %>%
select(-all_of(headers))
covid.table %>%
select(-(as.data.frame(headers)))
headers
?rm
rm(headers, pos = 1)
headers
headers
headers <- covid.table %>% colnames()
headers
headers %>% select("Date")
headers %>% filter("Date")
headers[1]
headers[0]
headers[1:4]
headers[1:8]
headers[1:8,10:12]
headers[1:8] + headers[10:12]
-headers[1:8]
index <- c(1:8, 10:12)
index
index <- c(1:8, 21:25)
index
headers[index]
covid.table %>% select(headers[index])
View(covid.table %>% select(headers[index]))
headers
covid.table <- covid.table %>%
select(headers[index])
covid.table
covid.table
covid.str
str(covid)
demo
demo %>% select(`Series Name`) %>% unique()
covid.table
demo %>% select(`Series Code`) %>% unique()
headers
index <- c(1:5, 7:8, 21:25)
index
?lm
lm(covid.table)
head(covid.table)
lm(data = covid.table)
str(covid.table)
lm(data = covid.table, formula = deaths ~ HospitalBeds)
lm(data = covid.table, formula = deaths ~ SP.URB.TOTL)
lm(data = covid.table, formula = deaths ~ SP.URB.TOTL + Date())
lm(data = covid.table, formula = deaths ~ SP.URB.TOTL + Date
)
View(covid)
covid.table
index
index %>% index[, c(1, 2)]
headers
?across
covid.table
covid.table
covid.table
8535606/34413603
18116800/34413603
15443807/34413603
852996/34413603
5794021/8642699
1220349/8642699
1628329/8642699
c(1:13)
covid.table %>%
covid.table[, c(1, 2, 3, 4, 5, 6, 7, 12, 8, 9, 10, 11, 12, 13)]
covid.table %>%
covid.table[, c(1, 2, 3, 4, 5, 6, 7
)]
covid.table %>%
covid.table[, c(1, 2, 3, 4, 5, 6, 7, 12, 8, 9, 10, 11, 12, 13)]
covid.table %>%
covid.table[, c(1:13)]
covid.table[, c(1:13)]
c(1:13)
covid.table[, c(1, 2,  3,  4,  5, 12,  6,  7, 8,  9, 10, 11, 13)]
covid.table[, c(1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13)]
# Reordering columns so that is easier to manage
covid.table <- covid.table[, c(1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 13)]
return(value/total)
convert_to_decimal <- function(value, total) {
return(value/total)
}
covid.table %>% mutate(across(SP.POP.80UP.TOTL:SP.POP.65UP.TOTL, ~convert_to_decimal(value = .x, total = SP.POP.TOTL)))
covid.table
covid.table <- covid.table %>%
mutate(across(SP.POP.80UP.TOTL:SP.POP.65UP.TOTL, ~convert_to_decimal(value = .x, total = SP.POP.TOTL)))
covid.table
covid.table %>% mutate(SP.URB.TOTL = ~convert_to_decimal(value = SP.URB.TOTL, total = SP.POP.TOTL))
covid.table %>% mutate(SP.URB.TOTL = convert_to_decimal(value = SP.URB.TOTL, total = SP.POP.TOTL))
covid %>% select(`Series Name`, `Series Code`) %>% distinct()
covid
demo %>% select(`Series Name`, `Series Code`) %>% distinct()
covid.table <- covid.table %>% mutate(SP.URB.TOTL = convert_to_decimal(value = SP.URB.TOTL, total = SP.POP.TOTL))
covid.table
ggplot(data = covid.table) + geom_point(mapping = aes(Date, deaths))
ggplot(data = covid.table) + geom_smooth(mapping = aes(Date, deaths))
kjfd
df
df
covid.table
covid.table
install.packages("tidytext")
library(tidytext)
library(tidyverse)
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The carriage held but just Ourselves -",
"and Immortality")
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
text_df <- tibble(line = 1:4, text = text)
text_df %>% unnest_tokens(word, text)
text_df
text_df %>% unnest_tokens(word, text)
word
text
text
pwd()
library(tidyverse)
library(tidytext)
cwd()
getwd()
setwd("/Users/naoki_atkins/Desktop")
tweets <- read_csv("tweets.csv")
tweets <- read_csv("hashcsufnew.csv")
tweets
text_df <- tibble(line = 1:4, text = tweets)
text_df <- tibble(line = 1:5453, text = tweets)
text_df %>% unnest_tokens(word, text)
text_df %>% unnest_tokens(word, text, token = "tweets")
text_df %>% unnest_tokens(word, tweets, token = "tweets")
word <- tibble(line = 0:5453, text = tweets)
unnest_tokens(input = tweets, output = word, token = "tweets")
word <- tibble(line = 0:5453, text = tweets)
word <- tibble(line = 1:5453, text = tweets)
unnest_tokens(input = tweets, output = word, token = "tweets")
?unnest_tokens
unnest_tokens(tbl = tweets, output = word, token = "tweets")
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = “word”  , token = "tweets")
tweetTokens %>% count(word) %>% arrange(-n)
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = “word”  , token = "tweets")
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
tweetTokens %>% count(word) %>% arrange(-n)
str(tweets)
library(tidytext)
library(tidyverse)
library(tidytext)
setwd("/Users/naoki_atkins/Desktop")
tweets <- read_csv("hashcsufnew.csv")
str(tweets)
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
tweetTokens %>% count(word) %>% arrange(-n)
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
tweetTokens %>% count(word) %>% arrange(-n)
tweets
tweets
tweets
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
newData <- read_csv("hashcsufnew.csv")
tweets <- newData %>% select(text)
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
tweetTokens %>% count(word) %>% arrange(-n)
setwd("/Users/naoki_atkins/Desktop")
newData <- read_csv("hashcsufnew.csv")
tweets <- newData %>% select(text)
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
tweets
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word"  , token = "tweets")
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word", token = "tweets")
tweets
tweetTokens <- tweets %>% unnest_tokens(input = tweets[:], output = "word", token = "tweets")
newData
tweets
tweetTokens
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = word, token = "tweets")
tweetTokens <- tweets %>% unnest_tokens(input = tweets, output = "word", token = "tweets")
tweetTokens <- tweets %>% unnest_tokens(word, text , token = "tweets")
tweetTokens %>% count(word) %>% arrange(-n)
topWords <- tweetTokens %>% count(word) %>% arrange(-n)
library(wordcloud)
install.packages("wordcloud")
?wordcloud
??wordcloud
wordcloud::wordcloud(topWords, max.words = 20)
install.packages("tm")
install.packages("slam")
wordcloud::wordcloud(topWords, max.words = 20)
?wordcloud
wordcloud(topWords, max.words = 10)
wordcloud::wordcloud(topWords, max.words = 10)
library("wordcloud")
library(wordcloud)
wordcloud::wordcloud(topWords, max.words = 10)
install.packages("wordcloud2")
library(wordcloud2)
wordcloud::wordcloud(topWords, max.words = 10)
wordcloud(topWords, max.words = 10)
wordcloud(topWords, max.words = 10)
wordcloud2::wordcloud(topWords, max.words = 10)
topWords
wordcloud2::wordcloud(topWords['word'], max.words = 10)
wordcloud2::wordcloud(topWords$word, max.words = 10)
wordcloud2::wordcloud(topWords$word, count = 19342, max.words = 10)
wordcloud2::wordcloud(topWords$word, count = topWords$n, max.words = 10)
wordcloud(topWords$word, count = topWords$n, max.words = 10)
wordcloud(topWords$word, count = topWords$n, max.words = 20)
wordcloud(topWords$word, count = topWords$n, max.words = 20)
wordcloud(topWords$word, count = topWords$n, max.words = 30)
wordcloud(topWords$word, count = topWords$n, max.words = 10)
getwd()
setwd("/Users/naoki_atkins/Code/Classwork/dataScience/hw7")
setwd("/Users/naoki_atkins/Documents/Code/Classwork/dataScience/hw7")
load("myvec.RData")
load("myvec.RData")
myvec
decompose(myvec)
?decompose
acf(myvec)
acf(myvec, lag.max = 100)
decompose(myvec, frequency = 50)
?decompose
my_ts <- ts(myvec, frequency = 50)
decomp <- decompose(my_ts)
ggplot(data=decomp)
decomp
plot(decomp)
TRUE
TRUE & FALSE
TRUE | FALSE
min(2, 3)
dtw <- function (A, B) {
M <- nrow(A)
N <- nrow(B)
Cost <- matrix(0,M,N) # Initialize with zeros
# compute cost and fill in the matrix
for (i in 1:M) {
for (j in 1:N) {
Cost[i,j] <- as.numeric((A[i,1] - B[j,1])^2 + (A[i,2] - B[j,2])^2) # distance function
}
}
C <- matrix(0,M,N) # Initialize with zeros
C[1,1] <- Cost[1,1] # Initialize top left cell
for (i in 2:M) { # Initialize first column
C[i,1] <- C[i-1,1] + Cost[i,1]
}
for (j in 2:N) { # Initialize first row
C[1,j] <- C[1,j-1] + Cost[1,j]
}
# Fill in everything besides the first column and first row
# Evaluate 3 neighbors (above, left-above, left)
# Pick the smallest
# Add the smallest value to ...
# Fill in the matrix with that computed value
for(i in 2:M & j in 2:N) {
C[i,j] <- min(C[i-1, j], C[i, j-1], C[i-1, j-1]) + Cost[i,j]
}
return (C[M,N])
}
library(tidyverse)
library(dplyr)
dtw <- function (A, B) {
M <- nrow(A)
N <- nrow(B)
Cost <- matrix(0,M,N) # Initialize with zeros
# compute cost and fill in the matrix
for (i in 1:M) {
for (j in 1:N) {
Cost[i,j] <- as.numeric((A[i,1] - B[j,1])^2 + (A[i,2] - B[j,2])^2) # distance function
}
}
C <- matrix(0,M,N) # Initialize with zeros
C[1,1] <- Cost[1,1] # Initialize top left cell
for (i in 2:M) { # Initialize first column
C[i,1] <- C[i-1,1] + Cost[i,1]
}
for (j in 2:N) { # Initialize first row
C[1,j] <- C[1,j-1] + Cost[1,j]
}
# Fill in everything besides the first column and first row
# Evaluate 3 neighbors (above, left-above, left)
# Pick the smallest
# Add the smallest value to ...
# Fill in the matrix with that computed value
for(i in 2:M & j in 2:N) {
C[i,j] <- min(C[i-1, j], C[i, j-1], C[i-1, j-1]) + Cost[i,j]
}
return (C[M,N])
}
dtw <- function (A, B) {
M <- nrow(A)
N <- nrow(B)
Cost <- matrix(0,M,N) # Initialize with zeros
# compute cost and fill in the matrix
for (i in 1:M) {
for (j in 1:N) {
Cost[i,j] <- as.numeric((A[i,1] - B[j,1])^2 + (A[i,2] - B[j,2])^2) # distance function
}
}
C <- matrix(0,M,N) # Initialize with zeros
C[1,1] <- Cost[1,1] # Initialize top left cell
for (i in 2:M) { # Initialize first column
C[i,1] <- C[i-1,1] + Cost[i,1]
}
for (j in 2:N) { # Initialize first row
C[1,j] <- C[1,j-1] + Cost[1,j]
}
# Fill in everything besides the first column and first row
# Evaluate 3 neighbors (above, left-above, left)
# Pick the smallest
# Add the smallest value to ...
# Fill in the matrix with that computed value
for(i in 2:M) {
for(j in 2:N) {
C[i,j] <- min(C[i-1, j], C[i, j-1], C[i-1, j-1]) + Cost[i,j]
}
}
return (C[M,N])
}
ls
list
A <- matrix(data = c(A.x, A.y))
# Question 3b.
A.x <- c(2, 0, 2, 4, 5)
A.y <- c(2, 4, 6, 5, 2)
A <- matrix(data = c(A.x, A.y))
A
A <- matrix(data = c(A.x, A.y), nrow = 5)
A
B.x <- c(1, 0, 4, 5)
B.y <- c(1, 6, 4, 1)
B <- matrix(data = c(B.x, B.y), nrow = 4)
dtw(A, B)
tsX <- read_csv("tsX.csv")
tsX
dtw(tsX, ts2)
ts2 <- read_csv("ts2.csv")
ts3 <- read_csv("ts3.csv")
ts4 <- read_csv("ts4.csv")
ts5 <- read_csv("ts5.csv")
dtw(tsX, ts2)
dtw(tsX, ts3)
# 18583.75
dtw(tsX, ts3)
dtw(tsX, ts4)
dtw(tsX, ts5)
tsX %>%
ggplot() +
geom_path()
tsX
tsX %>%
ggplot(aes(tsX$x, tsX$y)) +
geom_path()
ts2 %>%
ggplot(aes(ts2$x, ts2$y)) +
geom_path()
ts3 %>%
ggplot(aes(ts3$x, ts3$y)) +
geom_path()
ts4 %>%
ggplot(aes(ts4$x, ts4$y)) +
geom_path()
ts5 %>%
ggplot(aes(ts5$x, ts5$y)) +
geom_path()
tsX %>%
ggplot(aes(tsX$x, tsX$y)) +
geom_path()
ts2 %>%
ggplot(aes(ts2$x, ts2$y)) +
geom_path()
ts3 %>%
ggplot(aes(ts3$x, ts3$y)) +
geom_path()
ts4 %>%
ggplot(aes(ts4$x, ts4$y)) +
geom_path()
ts5 %>%
ggplot(aes(ts5$x, ts5$y)) +
geom_path()
ts4 %>%
ggplot(aes(ts4$x, ts4$y)) +
geom_path()
